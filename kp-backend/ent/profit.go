// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"kimchi/ent/profit"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Profit is the model entity for the Profit schema.
type Profit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date when trade happened
	Date time.Time `json:"date,omitempty"`
	// Profit holds the value of the "profit" field.
	Profit []float64 `json:"profit,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profit.FieldProfit:
			values[i] = new([]byte)
		case profit.FieldID:
			values[i] = new(sql.NullInt64)
		case profit.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Profit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profit fields.
func (pr *Profit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case profit.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				pr.Date = value.Time
			}
		case profit.FieldProfit:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field profit", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Profit); err != nil {
					return fmt.Errorf("unmarshal field profit: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Profit.
// Note that you need to call Profit.Unwrap() before calling this method if this Profit
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profit) Update() *ProfitUpdateOne {
	return (&ProfitClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Profit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profit) Unwrap() *Profit {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Profit is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profit) String() string {
	var builder strings.Builder
	builder.WriteString("Profit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("date=")
	builder.WriteString(pr.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("profit=")
	builder.WriteString(fmt.Sprintf("%v", pr.Profit))
	builder.WriteByte(')')
	return builder.String()
}

// Profits is a parsable slice of Profit.
type Profits []*Profit

func (pr Profits) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
