// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kimchi/ent/predicate"
	"kimchi/ent/profit"
	"kimchi/ent/tradelog"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProfit   = "Profit"
	TypeTradeLog = "TradeLog"
)

// ProfitMutation represents an operation that mutates the Profit nodes in the graph.
type ProfitMutation struct {
	config
	op            Op
	typ           string
	id            *int
	date          *time.Time
	profit        *[]float64
	appendprofit  []float64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Profit, error)
	predicates    []predicate.Profit
}

var _ ent.Mutation = (*ProfitMutation)(nil)

// profitOption allows management of the mutation configuration using functional options.
type profitOption func(*ProfitMutation)

// newProfitMutation creates new mutation for the Profit entity.
func newProfitMutation(c config, op Op, opts ...profitOption) *ProfitMutation {
	m := &ProfitMutation{
		config:        c,
		op:            op,
		typ:           TypeProfit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfitID sets the ID field of the mutation.
func withProfitID(id int) profitOption {
	return func(m *ProfitMutation) {
		var (
			err   error
			once  sync.Once
			value *Profit
		)
		m.oldValue = func(ctx context.Context) (*Profit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Profit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfit sets the old Profit of the mutation.
func withProfit(node *Profit) profitOption {
	return func(m *ProfitMutation) {
		m.oldValue = func(context.Context) (*Profit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Profit entities.
func (m *ProfitMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProfitMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProfitMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Profit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDate sets the "date" field.
func (m *ProfitMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *ProfitMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Profit entity.
// If the Profit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ClearDate clears the value of the "date" field.
func (m *ProfitMutation) ClearDate() {
	m.date = nil
	m.clearedFields[profit.FieldDate] = struct{}{}
}

// DateCleared returns if the "date" field was cleared in this mutation.
func (m *ProfitMutation) DateCleared() bool {
	_, ok := m.clearedFields[profit.FieldDate]
	return ok
}

// ResetDate resets all changes to the "date" field.
func (m *ProfitMutation) ResetDate() {
	m.date = nil
	delete(m.clearedFields, profit.FieldDate)
}

// SetProfit sets the "profit" field.
func (m *ProfitMutation) SetProfit(f []float64) {
	m.profit = &f
	m.appendprofit = nil
}

// Profit returns the value of the "profit" field in the mutation.
func (m *ProfitMutation) Profit() (r []float64, exists bool) {
	v := m.profit
	if v == nil {
		return
	}
	return *v, true
}

// OldProfit returns the old "profit" field's value of the Profit entity.
// If the Profit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitMutation) OldProfit(ctx context.Context) (v []float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfit: %w", err)
	}
	return oldValue.Profit, nil
}

// AppendProfit adds f to the "profit" field.
func (m *ProfitMutation) AppendProfit(f []float64) {
	m.appendprofit = append(m.appendprofit, f...)
}

// AppendedProfit returns the list of values that were appended to the "profit" field in this mutation.
func (m *ProfitMutation) AppendedProfit() ([]float64, bool) {
	if len(m.appendprofit) == 0 {
		return nil, false
	}
	return m.appendprofit, true
}

// ClearProfit clears the value of the "profit" field.
func (m *ProfitMutation) ClearProfit() {
	m.profit = nil
	m.appendprofit = nil
	m.clearedFields[profit.FieldProfit] = struct{}{}
}

// ProfitCleared returns if the "profit" field was cleared in this mutation.
func (m *ProfitMutation) ProfitCleared() bool {
	_, ok := m.clearedFields[profit.FieldProfit]
	return ok
}

// ResetProfit resets all changes to the "profit" field.
func (m *ProfitMutation) ResetProfit() {
	m.profit = nil
	m.appendprofit = nil
	delete(m.clearedFields, profit.FieldProfit)
}

// Where appends a list predicates to the ProfitMutation builder.
func (m *ProfitMutation) Where(ps ...predicate.Profit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProfitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Profit).
func (m *ProfitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfitMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.date != nil {
		fields = append(fields, profit.FieldDate)
	}
	if m.profit != nil {
		fields = append(fields, profit.FieldProfit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profit.FieldDate:
		return m.Date()
	case profit.FieldProfit:
		return m.Profit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profit.FieldDate:
		return m.OldDate(ctx)
	case profit.FieldProfit:
		return m.OldProfit(ctx)
	}
	return nil, fmt.Errorf("unknown Profit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profit.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case profit.FieldProfit:
		v, ok := value.([]float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfit(v)
		return nil
	}
	return fmt.Errorf("unknown Profit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfitMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfitMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfitMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Profit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profit.FieldDate) {
		fields = append(fields, profit.FieldDate)
	}
	if m.FieldCleared(profit.FieldProfit) {
		fields = append(fields, profit.FieldProfit)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfitMutation) ClearField(name string) error {
	switch name {
	case profit.FieldDate:
		m.ClearDate()
		return nil
	case profit.FieldProfit:
		m.ClearProfit()
		return nil
	}
	return fmt.Errorf("unknown Profit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfitMutation) ResetField(name string) error {
	switch name {
	case profit.FieldDate:
		m.ResetDate()
		return nil
	case profit.FieldProfit:
		m.ResetProfit()
		return nil
	}
	return fmt.Errorf("unknown Profit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Profit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Profit edge %s", name)
}

// TradeLogMutation represents an operation that mutates the TradeLog nodes in the graph.
type TradeLogMutation struct {
	config
	op            Op
	typ           string
	id            *int
	date          *time.Time
	exchange      *string
	ticker        *string
	position      *string
	strategy      *string
	price         *float64
	addprice      *float64
	quantity      *float64
	addquantity   *float64
	leverage      *int
	addleverage   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TradeLog, error)
	predicates    []predicate.TradeLog
}

var _ ent.Mutation = (*TradeLogMutation)(nil)

// tradelogOption allows management of the mutation configuration using functional options.
type tradelogOption func(*TradeLogMutation)

// newTradeLogMutation creates new mutation for the TradeLog entity.
func newTradeLogMutation(c config, op Op, opts ...tradelogOption) *TradeLogMutation {
	m := &TradeLogMutation{
		config:        c,
		op:            op,
		typ:           TypeTradeLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTradeLogID sets the ID field of the mutation.
func withTradeLogID(id int) tradelogOption {
	return func(m *TradeLogMutation) {
		var (
			err   error
			once  sync.Once
			value *TradeLog
		)
		m.oldValue = func(ctx context.Context) (*TradeLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TradeLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTradeLog sets the old TradeLog of the mutation.
func withTradeLog(node *TradeLog) tradelogOption {
	return func(m *TradeLogMutation) {
		m.oldValue = func(context.Context) (*TradeLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TradeLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TradeLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TradeLog entities.
func (m *TradeLogMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TradeLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TradeLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TradeLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDate sets the "date" field.
func (m *TradeLogMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *TradeLogMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the TradeLog entity.
// If the TradeLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeLogMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ClearDate clears the value of the "date" field.
func (m *TradeLogMutation) ClearDate() {
	m.date = nil
	m.clearedFields[tradelog.FieldDate] = struct{}{}
}

// DateCleared returns if the "date" field was cleared in this mutation.
func (m *TradeLogMutation) DateCleared() bool {
	_, ok := m.clearedFields[tradelog.FieldDate]
	return ok
}

// ResetDate resets all changes to the "date" field.
func (m *TradeLogMutation) ResetDate() {
	m.date = nil
	delete(m.clearedFields, tradelog.FieldDate)
}

// SetExchange sets the "exchange" field.
func (m *TradeLogMutation) SetExchange(s string) {
	m.exchange = &s
}

// Exchange returns the value of the "exchange" field in the mutation.
func (m *TradeLogMutation) Exchange() (r string, exists bool) {
	v := m.exchange
	if v == nil {
		return
	}
	return *v, true
}

// OldExchange returns the old "exchange" field's value of the TradeLog entity.
// If the TradeLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeLogMutation) OldExchange(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExchange is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExchange requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExchange: %w", err)
	}
	return oldValue.Exchange, nil
}

// ClearExchange clears the value of the "exchange" field.
func (m *TradeLogMutation) ClearExchange() {
	m.exchange = nil
	m.clearedFields[tradelog.FieldExchange] = struct{}{}
}

// ExchangeCleared returns if the "exchange" field was cleared in this mutation.
func (m *TradeLogMutation) ExchangeCleared() bool {
	_, ok := m.clearedFields[tradelog.FieldExchange]
	return ok
}

// ResetExchange resets all changes to the "exchange" field.
func (m *TradeLogMutation) ResetExchange() {
	m.exchange = nil
	delete(m.clearedFields, tradelog.FieldExchange)
}

// SetTicker sets the "ticker" field.
func (m *TradeLogMutation) SetTicker(s string) {
	m.ticker = &s
}

// Ticker returns the value of the "ticker" field in the mutation.
func (m *TradeLogMutation) Ticker() (r string, exists bool) {
	v := m.ticker
	if v == nil {
		return
	}
	return *v, true
}

// OldTicker returns the old "ticker" field's value of the TradeLog entity.
// If the TradeLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeLogMutation) OldTicker(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicker is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicker requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicker: %w", err)
	}
	return oldValue.Ticker, nil
}

// ClearTicker clears the value of the "ticker" field.
func (m *TradeLogMutation) ClearTicker() {
	m.ticker = nil
	m.clearedFields[tradelog.FieldTicker] = struct{}{}
}

// TickerCleared returns if the "ticker" field was cleared in this mutation.
func (m *TradeLogMutation) TickerCleared() bool {
	_, ok := m.clearedFields[tradelog.FieldTicker]
	return ok
}

// ResetTicker resets all changes to the "ticker" field.
func (m *TradeLogMutation) ResetTicker() {
	m.ticker = nil
	delete(m.clearedFields, tradelog.FieldTicker)
}

// SetPosition sets the "position" field.
func (m *TradeLogMutation) SetPosition(s string) {
	m.position = &s
}

// Position returns the value of the "position" field in the mutation.
func (m *TradeLogMutation) Position() (r string, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the TradeLog entity.
// If the TradeLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeLogMutation) OldPosition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// ClearPosition clears the value of the "position" field.
func (m *TradeLogMutation) ClearPosition() {
	m.position = nil
	m.clearedFields[tradelog.FieldPosition] = struct{}{}
}

// PositionCleared returns if the "position" field was cleared in this mutation.
func (m *TradeLogMutation) PositionCleared() bool {
	_, ok := m.clearedFields[tradelog.FieldPosition]
	return ok
}

// ResetPosition resets all changes to the "position" field.
func (m *TradeLogMutation) ResetPosition() {
	m.position = nil
	delete(m.clearedFields, tradelog.FieldPosition)
}

// SetStrategy sets the "strategy" field.
func (m *TradeLogMutation) SetStrategy(s string) {
	m.strategy = &s
}

// Strategy returns the value of the "strategy" field in the mutation.
func (m *TradeLogMutation) Strategy() (r string, exists bool) {
	v := m.strategy
	if v == nil {
		return
	}
	return *v, true
}

// OldStrategy returns the old "strategy" field's value of the TradeLog entity.
// If the TradeLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeLogMutation) OldStrategy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStrategy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStrategy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStrategy: %w", err)
	}
	return oldValue.Strategy, nil
}

// ClearStrategy clears the value of the "strategy" field.
func (m *TradeLogMutation) ClearStrategy() {
	m.strategy = nil
	m.clearedFields[tradelog.FieldStrategy] = struct{}{}
}

// StrategyCleared returns if the "strategy" field was cleared in this mutation.
func (m *TradeLogMutation) StrategyCleared() bool {
	_, ok := m.clearedFields[tradelog.FieldStrategy]
	return ok
}

// ResetStrategy resets all changes to the "strategy" field.
func (m *TradeLogMutation) ResetStrategy() {
	m.strategy = nil
	delete(m.clearedFields, tradelog.FieldStrategy)
}

// SetPrice sets the "price" field.
func (m *TradeLogMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *TradeLogMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the TradeLog entity.
// If the TradeLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeLogMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *TradeLogMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *TradeLogMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ClearPrice clears the value of the "price" field.
func (m *TradeLogMutation) ClearPrice() {
	m.price = nil
	m.addprice = nil
	m.clearedFields[tradelog.FieldPrice] = struct{}{}
}

// PriceCleared returns if the "price" field was cleared in this mutation.
func (m *TradeLogMutation) PriceCleared() bool {
	_, ok := m.clearedFields[tradelog.FieldPrice]
	return ok
}

// ResetPrice resets all changes to the "price" field.
func (m *TradeLogMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
	delete(m.clearedFields, tradelog.FieldPrice)
}

// SetQuantity sets the "quantity" field.
func (m *TradeLogMutation) SetQuantity(f float64) {
	m.quantity = &f
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *TradeLogMutation) Quantity() (r float64, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the TradeLog entity.
// If the TradeLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeLogMutation) OldQuantity(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds f to the "quantity" field.
func (m *TradeLogMutation) AddQuantity(f float64) {
	if m.addquantity != nil {
		*m.addquantity += f
	} else {
		m.addquantity = &f
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *TradeLogMutation) AddedQuantity() (r float64, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ClearQuantity clears the value of the "quantity" field.
func (m *TradeLogMutation) ClearQuantity() {
	m.quantity = nil
	m.addquantity = nil
	m.clearedFields[tradelog.FieldQuantity] = struct{}{}
}

// QuantityCleared returns if the "quantity" field was cleared in this mutation.
func (m *TradeLogMutation) QuantityCleared() bool {
	_, ok := m.clearedFields[tradelog.FieldQuantity]
	return ok
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *TradeLogMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
	delete(m.clearedFields, tradelog.FieldQuantity)
}

// SetLeverage sets the "leverage" field.
func (m *TradeLogMutation) SetLeverage(i int) {
	m.leverage = &i
	m.addleverage = nil
}

// Leverage returns the value of the "leverage" field in the mutation.
func (m *TradeLogMutation) Leverage() (r int, exists bool) {
	v := m.leverage
	if v == nil {
		return
	}
	return *v, true
}

// OldLeverage returns the old "leverage" field's value of the TradeLog entity.
// If the TradeLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradeLogMutation) OldLeverage(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLeverage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLeverage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeverage: %w", err)
	}
	return oldValue.Leverage, nil
}

// AddLeverage adds i to the "leverage" field.
func (m *TradeLogMutation) AddLeverage(i int) {
	if m.addleverage != nil {
		*m.addleverage += i
	} else {
		m.addleverage = &i
	}
}

// AddedLeverage returns the value that was added to the "leverage" field in this mutation.
func (m *TradeLogMutation) AddedLeverage() (r int, exists bool) {
	v := m.addleverage
	if v == nil {
		return
	}
	return *v, true
}

// ClearLeverage clears the value of the "leverage" field.
func (m *TradeLogMutation) ClearLeverage() {
	m.leverage = nil
	m.addleverage = nil
	m.clearedFields[tradelog.FieldLeverage] = struct{}{}
}

// LeverageCleared returns if the "leverage" field was cleared in this mutation.
func (m *TradeLogMutation) LeverageCleared() bool {
	_, ok := m.clearedFields[tradelog.FieldLeverage]
	return ok
}

// ResetLeverage resets all changes to the "leverage" field.
func (m *TradeLogMutation) ResetLeverage() {
	m.leverage = nil
	m.addleverage = nil
	delete(m.clearedFields, tradelog.FieldLeverage)
}

// Where appends a list predicates to the TradeLogMutation builder.
func (m *TradeLogMutation) Where(ps ...predicate.TradeLog) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TradeLogMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TradeLog).
func (m *TradeLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TradeLogMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.date != nil {
		fields = append(fields, tradelog.FieldDate)
	}
	if m.exchange != nil {
		fields = append(fields, tradelog.FieldExchange)
	}
	if m.ticker != nil {
		fields = append(fields, tradelog.FieldTicker)
	}
	if m.position != nil {
		fields = append(fields, tradelog.FieldPosition)
	}
	if m.strategy != nil {
		fields = append(fields, tradelog.FieldStrategy)
	}
	if m.price != nil {
		fields = append(fields, tradelog.FieldPrice)
	}
	if m.quantity != nil {
		fields = append(fields, tradelog.FieldQuantity)
	}
	if m.leverage != nil {
		fields = append(fields, tradelog.FieldLeverage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TradeLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tradelog.FieldDate:
		return m.Date()
	case tradelog.FieldExchange:
		return m.Exchange()
	case tradelog.FieldTicker:
		return m.Ticker()
	case tradelog.FieldPosition:
		return m.Position()
	case tradelog.FieldStrategy:
		return m.Strategy()
	case tradelog.FieldPrice:
		return m.Price()
	case tradelog.FieldQuantity:
		return m.Quantity()
	case tradelog.FieldLeverage:
		return m.Leverage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TradeLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tradelog.FieldDate:
		return m.OldDate(ctx)
	case tradelog.FieldExchange:
		return m.OldExchange(ctx)
	case tradelog.FieldTicker:
		return m.OldTicker(ctx)
	case tradelog.FieldPosition:
		return m.OldPosition(ctx)
	case tradelog.FieldStrategy:
		return m.OldStrategy(ctx)
	case tradelog.FieldPrice:
		return m.OldPrice(ctx)
	case tradelog.FieldQuantity:
		return m.OldQuantity(ctx)
	case tradelog.FieldLeverage:
		return m.OldLeverage(ctx)
	}
	return nil, fmt.Errorf("unknown TradeLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TradeLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tradelog.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case tradelog.FieldExchange:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExchange(v)
		return nil
	case tradelog.FieldTicker:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicker(v)
		return nil
	case tradelog.FieldPosition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	case tradelog.FieldStrategy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStrategy(v)
		return nil
	case tradelog.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case tradelog.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case tradelog.FieldLeverage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeverage(v)
		return nil
	}
	return fmt.Errorf("unknown TradeLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TradeLogMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, tradelog.FieldPrice)
	}
	if m.addquantity != nil {
		fields = append(fields, tradelog.FieldQuantity)
	}
	if m.addleverage != nil {
		fields = append(fields, tradelog.FieldLeverage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TradeLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tradelog.FieldPrice:
		return m.AddedPrice()
	case tradelog.FieldQuantity:
		return m.AddedQuantity()
	case tradelog.FieldLeverage:
		return m.AddedLeverage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TradeLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tradelog.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case tradelog.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case tradelog.FieldLeverage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLeverage(v)
		return nil
	}
	return fmt.Errorf("unknown TradeLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TradeLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tradelog.FieldDate) {
		fields = append(fields, tradelog.FieldDate)
	}
	if m.FieldCleared(tradelog.FieldExchange) {
		fields = append(fields, tradelog.FieldExchange)
	}
	if m.FieldCleared(tradelog.FieldTicker) {
		fields = append(fields, tradelog.FieldTicker)
	}
	if m.FieldCleared(tradelog.FieldPosition) {
		fields = append(fields, tradelog.FieldPosition)
	}
	if m.FieldCleared(tradelog.FieldStrategy) {
		fields = append(fields, tradelog.FieldStrategy)
	}
	if m.FieldCleared(tradelog.FieldPrice) {
		fields = append(fields, tradelog.FieldPrice)
	}
	if m.FieldCleared(tradelog.FieldQuantity) {
		fields = append(fields, tradelog.FieldQuantity)
	}
	if m.FieldCleared(tradelog.FieldLeverage) {
		fields = append(fields, tradelog.FieldLeverage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TradeLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TradeLogMutation) ClearField(name string) error {
	switch name {
	case tradelog.FieldDate:
		m.ClearDate()
		return nil
	case tradelog.FieldExchange:
		m.ClearExchange()
		return nil
	case tradelog.FieldTicker:
		m.ClearTicker()
		return nil
	case tradelog.FieldPosition:
		m.ClearPosition()
		return nil
	case tradelog.FieldStrategy:
		m.ClearStrategy()
		return nil
	case tradelog.FieldPrice:
		m.ClearPrice()
		return nil
	case tradelog.FieldQuantity:
		m.ClearQuantity()
		return nil
	case tradelog.FieldLeverage:
		m.ClearLeverage()
		return nil
	}
	return fmt.Errorf("unknown TradeLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TradeLogMutation) ResetField(name string) error {
	switch name {
	case tradelog.FieldDate:
		m.ResetDate()
		return nil
	case tradelog.FieldExchange:
		m.ResetExchange()
		return nil
	case tradelog.FieldTicker:
		m.ResetTicker()
		return nil
	case tradelog.FieldPosition:
		m.ResetPosition()
		return nil
	case tradelog.FieldStrategy:
		m.ResetStrategy()
		return nil
	case tradelog.FieldPrice:
		m.ResetPrice()
		return nil
	case tradelog.FieldQuantity:
		m.ResetQuantity()
		return nil
	case tradelog.FieldLeverage:
		m.ResetLeverage()
		return nil
	}
	return fmt.Errorf("unknown TradeLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TradeLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TradeLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TradeLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TradeLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TradeLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TradeLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TradeLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TradeLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TradeLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TradeLog edge %s", name)
}
