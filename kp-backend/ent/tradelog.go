// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kimchi/ent/tradelog"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TradeLog is the model entity for the TradeLog schema.
type TradeLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date when transaction happened
	Date time.Time `json:"date,omitempty"`
	// Exchange where transaction happened
	Exchange string `json:"exchange,omitempty"`
	// Asset ticker ex) BTC
	Ticker string `json:"ticker,omitempty"`
	// Long position or Short
	Position string `json:"position,omitempty"`
	// Strategy name
	Strategy string `json:"strategy,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity float64 `json:"quantity,omitempty"`
	// Leverage holds the value of the "leverage" field.
	Leverage int `json:"leverage,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TradeLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tradelog.FieldPrice, tradelog.FieldQuantity:
			values[i] = new(sql.NullFloat64)
		case tradelog.FieldID, tradelog.FieldLeverage:
			values[i] = new(sql.NullInt64)
		case tradelog.FieldExchange, tradelog.FieldTicker, tradelog.FieldPosition, tradelog.FieldStrategy:
			values[i] = new(sql.NullString)
		case tradelog.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TradeLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TradeLog fields.
func (tl *TradeLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tradelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tl.ID = int(value.Int64)
		case tradelog.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				tl.Date = value.Time
			}
		case tradelog.FieldExchange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exchange", values[i])
			} else if value.Valid {
				tl.Exchange = value.String
			}
		case tradelog.FieldTicker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticker", values[i])
			} else if value.Valid {
				tl.Ticker = value.String
			}
		case tradelog.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				tl.Position = value.String
			}
		case tradelog.FieldStrategy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field strategy", values[i])
			} else if value.Valid {
				tl.Strategy = value.String
			}
		case tradelog.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				tl.Price = value.Float64
			}
		case tradelog.FieldQuantity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				tl.Quantity = value.Float64
			}
		case tradelog.FieldLeverage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field leverage", values[i])
			} else if value.Valid {
				tl.Leverage = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TradeLog.
// Note that you need to call TradeLog.Unwrap() before calling this method if this TradeLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TradeLog) Update() *TradeLogUpdateOne {
	return (&TradeLogClient{config: tl.config}).UpdateOne(tl)
}

// Unwrap unwraps the TradeLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TradeLog) Unwrap() *TradeLog {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TradeLog is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TradeLog) String() string {
	var builder strings.Builder
	builder.WriteString("TradeLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("date=")
	builder.WriteString(tl.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("exchange=")
	builder.WriteString(tl.Exchange)
	builder.WriteString(", ")
	builder.WriteString("ticker=")
	builder.WriteString(tl.Ticker)
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(tl.Position)
	builder.WriteString(", ")
	builder.WriteString("strategy=")
	builder.WriteString(tl.Strategy)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", tl.Price))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", tl.Quantity))
	builder.WriteString(", ")
	builder.WriteString("leverage=")
	builder.WriteString(fmt.Sprintf("%v", tl.Leverage))
	builder.WriteByte(')')
	return builder.String()
}

// TradeLogs is a parsable slice of TradeLog.
type TradeLogs []*TradeLog

func (tl TradeLogs) config(cfg config) {
	for _i := range tl {
		tl[_i].config = cfg
	}
}
